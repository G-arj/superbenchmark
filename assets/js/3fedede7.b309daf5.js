(self.webpackChunksuperbench_website=self.webpackChunksuperbench_website||[]).push([[774],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3433:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),l=["components"],o={id:"data-diagnosis"},u="Data Diagnosis",s={unversionedId:"user-tutorial/data-diagnosis",id:"user-tutorial/data-diagnosis",isDocsHomePage:!1,title:"Data Diagnosis",description:"Introduction",source:"@site/../docs/user-tutorial/data-diagnosis.md",sourceDirName:"user-tutorial",slug:"/user-tutorial/data-diagnosis",permalink:"/superbenchmark/docs/user-tutorial/data-diagnosis",editUrl:"https://github.com/microsoft/superbenchmark/edit/main/website/../docs/user-tutorial/data-diagnosis.md",version:"current",frontMatter:{id:"data-diagnosis"},sidebar:"docs",previous:{title:"System Config Info",permalink:"/superbenchmark/docs/user-tutorial/system-config"},next:{title:"Container Images",permalink:"/superbenchmark/docs/user-tutorial/container-images"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Input",id:"input",children:[{value:"rule file",id:"rule-file",children:[]}]},{value:"Output",id:"output",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"data-diagnosis"},"Data Diagnosis"),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"This tool is to filter the defective machines automatically from thousands of benchmarking results according to rules defined in ",(0,i.kt)("strong",{parentName:"p"},"rule file"),"."),(0,i.kt)("h2",{id:"input"},"Input"),(0,i.kt)("p",null,"The input mainly includes 3 files:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"raw data"),": jsonl file including multiple nodes' results automatically generated by SuperBench runner."),(0,i.kt)("p",{parentName:"li"}," ",(0,i.kt)("inlineCode",{parentName:"p"},"Tips"),": this file can be found at ${output-dir}/results-summary.jsonl after each successful run.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"rule file"),": It uses YAML format and includes each metrics' rules to filter defective machines for diagnosis.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"baseline file"),": json file including the baseline values for the metrics."),(0,i.kt)("p",{parentName:"li"}," ",(0,i.kt)("inlineCode",{parentName:"p"},"Tips"),": this file for some representative machine types will be published in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/microsoft/superbench-results/tree/main"},"SuperBench Results Repo")," with the release of Superbench."))),(0,i.kt)("h3",{id:"rule-file"},"rule file"),(0,i.kt)("p",null,"This section describes how to write rules in ",(0,i.kt)("strong",{parentName:"p"},"rule file"),"."),(0,i.kt)("p",null,"The convention is the same with ",(0,i.kt)("a",{parentName:"p",href:"https://microsoft.github.io/superbenchmark/docs/superbench-config"},"SuperBench Config File"),", please view it first."),(0,i.kt)("p",null,"Here is an overview of the rule file structure:"),(0,i.kt)("p",null,"scheme:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"version: string\nsuperbench:\n  var:\n    ${var_name}: dict\n  rules:\n    ${rule_name}:\n      function: string\n      criteria: string\n      categories: string\n      metrics:\n        - ${benchmark_name}/regex\n        - ${benchmark_name}/regex\n        ...\n")),(0,i.kt)("p",null,"example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# SuperBench rules\nversion: v0.3\nsuperbench:\n  rules:\n    failure-rule:\n      function: value\n      criteria: lambda x:x>0\n      categories: Failed\n      metrics:\n        - kernel-launch/return_code\n        - mem-bw/return_code\n        - nccl-bw/return_code\n        - ib-loopback/return_code\n    rule0:\n    # Rule 0: If KernelLaunch suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x>0.05\n      categories: KernelLaunch\n      metrics:\n        - kernel-launch/event_overhead:\\d+\n        - kernel-launch/wall_overhead:\\d+\n    rule1:\n    # Rule 1: If H2D_Mem_BW or D2H_Mem_BW test suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x<-0.05\n      categories: Mem\n      metrics:\n        - mem-bw/H2D_Mem_BW:\\d+\n        - mem-bw/D2H_Mem_BW:\\d+\n    rule2:\n    # Rule 2: If NCCL_BW suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x<-0.05\n      categories: NCCL\n      metircs:\n        - nccl-bw/allreduce_8589934592_busbw:0\n    rule3:\n    # Rule 3: If GPT-2, BERT suffers > 5% downgrade, label it as defective\n      function: variance\n      criteria: lambda x:x<-0.05\n      categories: Model\n      metrics:\n        - bert_models/pytorch-bert-base/throughput_train_float(32|16)\n        - bert_models/pytorch-bert-large/throughput_train_float(32|16)\n        - gpt_models/pytorch-gpt-large/throughput_train_float(32|16)\n")),(0,i.kt)("p",null,"This rule file describes the rules used for data diagnosis."),(0,i.kt)("p",null,"They are firstly organized by the rule name, and each rule mainly includes 4 elements:"),(0,i.kt)("h4",{id:"metrics"},(0,i.kt)("inlineCode",{parentName:"h4"},"metrics")),(0,i.kt)("p",null,"The list of metrics for this rule. Each metric is in the format of ${benchmark_name}/regex, you can use regex after the first '/', but to be noticed, the benchmark name can not be a regex."),(0,i.kt)("h4",{id:"categories"},(0,i.kt)("inlineCode",{parentName:"h4"},"categories")),(0,i.kt)("p",null,"The categories belong to this rule."),(0,i.kt)("h4",{id:"criteria"},(0,i.kt)("inlineCode",{parentName:"h4"},"criteria")),(0,i.kt)("p",null,"The criteria used for this rule, which indicate how to compare the data with the baseline value. The format should be a lambda function supported by Python."),(0,i.kt)("h4",{id:"function"},(0,i.kt)("inlineCode",{parentName:"h4"},"function")),(0,i.kt)("p",null,"The function used for this rule."),(0,i.kt)("p",null,"2 types of rules are supported currently:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"variance"),": the rule is to check if the variance between raw data and baseline violates the criteria. variance = (raw data - criteria) / criteria"),(0,i.kt)("p",{parentName:"li"},"For example, if the criteria are ",(0,i.kt)("inlineCode",{parentName:"p"},"lambda x:x>0.05"),", the rule is that if the variance is larger than 5%, it should be defective.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"value"),": the rule is to check if the raw data violate the criteria."),(0,i.kt)("p",{parentName:"li"},"For example, if the criteria are ",(0,i.kt)("inlineCode",{parentName:"p"},"lambda x:x>0"),", the rule is that if the raw data is larger than the 0, it should be defective."))),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Tips"),": you must contain a default rule for ${benchmark_name}/return_code as the above in the example, which is used to identify failed tests."),(0,i.kt)("h2",{id:"output"},"Output"),(0,i.kt)("p",null,"We support different output formats for filtering the defective machines including jsonl, excel, etc. The output includes all defective machines' information including index, failure category, failure details, and detailed metrics."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"index: the name of defective machines.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Category: categories defined in the rule.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Defective Details: all violated metrics including metric data and related rule.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"${metric}: the data of the metrics defined in the rule file. If the rule is ",(0,i.kt)("inlineCode",{parentName:"p"},"variance"),", the form of the data is variance in percentage; if the rule is ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),", the form of the data is raw data."))))}d.isMDXComponent=!0}}]);